#!/usr/bin/env ruby

flag = ARGV[0] || raise

raise unless flag.size <= 128

arys = []

15.times do
  arys << 128.times.map{ rand(256) }
end

final = flag.bytes
final += [0] * (128 - final.size)
128.times do |i|
  final[i] ^= arys.map{|a| a[i]}.inject{|u,v| u^v}
end
arys << final

code = %Q[
#include <time.h>
#include <stdlib.h>
#include <stdio.h>

char tables[16*128] = {
  #{arys.flatten.join(", ")}
};

void reveal_password(char *buf) {
  for(int i=0; i<128; i++) {
    buf[i] = 0;
  }
  for(int i=0; i<128*16; i++) {
    buf[i % 128] ^= tables[i];
  }
}

int main(int argc, char **argv) {
  time_t t = time(NULL);
  struct tm *tm = gmtime(&t);
  if (tm->tm_year > 119) {
    char buf[128];
    reveal_password(buf);
    printf("%s\\n", buf);
  } else {
    printf("It's too early to report password. Try again in 2020.\\n");
  }
  return 0;
}
]

open("from_future_import_flag_osx.c", "w") do |fh|
  fh.puts code
end
